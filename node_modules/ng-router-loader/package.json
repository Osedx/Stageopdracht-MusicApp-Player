{
  "_args": [
    [
      {
        "raw": "ng-router-loader@^2.1.0",
        "scope": null,
        "escapedName": "ng-router-loader",
        "name": "ng-router-loader",
        "rawSpec": "^2.1.0",
        "spec": ">=2.1.0 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\Osedx\\Documents\\Project - muziek webapp\\player"
    ]
  ],
  "_from": "ng-router-loader@>=2.1.0 <3.0.0",
  "_id": "ng-router-loader@2.1.0",
  "_inCache": true,
  "_location": "/ng-router-loader",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/ng-router-loader-2.1.0.tgz_1484965678159_0.5347103180829436"
  },
  "_npmUser": {
    "name": "shlomiassaf",
    "email": "shlomiasaf@gmail.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ng-router-loader@^2.1.0",
    "scope": null,
    "escapedName": "ng-router-loader",
    "name": "ng-router-loader",
    "rawSpec": "^2.1.0",
    "spec": ">=2.1.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ng-router-loader/-/ng-router-loader-2.1.0.tgz",
  "_shasum": "7a253863d0d7fde804564f39762ebd7f78afc8e9",
  "_shrinkwrap": null,
  "_spec": "ng-router-loader@^2.1.0",
  "_where": "C:\\Users\\Osedx\\Documents\\Project - muziek webapp\\player",
  "author": {
    "name": "Shlomi Assaf",
    "email": "shlomiasaf@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/shlomiassaf/ng-router-loader/issues"
  },
  "dependencies": {
    "loader-utils": "^0.2.16",
    "recast": "^0.11.20"
  },
  "description": "Webpack loader for `NgModule` lazy loading using the angular router",
  "devDependencies": {
    "@angular/common": "~2.4.1",
    "@angular/compiler": "~2.4.1",
    "@angular/compiler-cli": "~2.4.1",
    "@angular/core": "~2.4.1",
    "@angular/forms": "~2.4.1",
    "@angular/http": "~2.4.1",
    "@angular/material": "2.0.0-beta.1",
    "@angular/platform-browser": "~2.4.1",
    "@angular/platform-browser-dynamic": "~2.4.1",
    "@angular/platform-server": "~2.4.1",
    "@angular/router": "~3.4.1",
    "@types/chai": "^3.4.34",
    "@types/mocha": "^2.2.35",
    "@types/node": "^6.0.55",
    "@types/webpack": "^2.2.2",
    "awesome-typescript-loader": "~3.0.0-beta.18",
    "chai": "^3.5.0",
    "mocha": "^3.2.0",
    "ngc-webpack": "^1.1.2",
    "rxjs": "^5.0.2",
    "ts-node": "^2.0.0",
    "typedoc": "^0.5.3",
    "typedoc-markdown-theme": "^0.0.4",
    "typescript": "2.1.5",
    "webpack": "2.2.0",
    "zone.js": "~0.7.4"
  },
  "directories": {},
  "dist": {
    "shasum": "7a253863d0d7fde804564f39762ebd7f78afc8e9",
    "tarball": "https://registry.npmjs.org/ng-router-loader/-/ng-router-loader-2.1.0.tgz"
  },
  "homepage": "https://github.com/shlomiassaf/ng-router-loader#readme",
  "keywords": [
    "webpack",
    "loader",
    "angular",
    "aot",
    "router",
    "lazy-loading"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "shlomiassaf",
      "email": "shlomiasaf@gmail.com"
    }
  ],
  "name": "ng-router-loader",
  "optionalDependencies": {},
  "readme": "\nWebpack loader for `NgModule` lazy loading using the angular router\n\n\n[![Build Status](https://travis-ci.org/shlomiassaf/ng-router-loader.svg?branch=master)](https://travis-ci.org/shlomiassaf/ng-router-loader)\n[![GitHub version](https://badge.fury.io/gh/shlomiassaf%2Fng-router-loader.svg)](https://badge.fury.io/gh/shlomiassaf%2Fng-router-loader)\n\n## Installation\n\n`npm install ng-router-loader --save-dev`\n\nOR\n\n`yarn add ng-router-loader --dev`\n\n# V 2.0.0 BREAKING CHANGES:\nVersion 2.0.0 introduce support for the [import()](https://github.com/tc39/proposal-dynamic-import) construct.  \n`import()` is [not yet implemented](https://github.com/Microsoft/TypeScript/issues/12364) in TypeScript. \nTypeScript does not ignore it but transpile it to something else which breaks the code.\n\nTo use the `import()` construct the loader must run **AFTER** the typescript transpilation process, \nthis is after the `awesome-typescript-loader` in the example below. \n\nRunning after TS also means all code generators now emit ES5 code.\n\n> Webpack 1 users can't use `async-import` as it's not supported in version 1.  \nWebpack 2 users can use it as long as they are running on webpack > 2.1.0 beta28\n\n# V 2.1.0 BREAKING CHANGES:\n`ng-router-loader` now uses AST to parse the module.  \nUsing AST provides a more accurate detection of the `loadChildren` property.\n\n## Webpack integration\n\nAdd the `ng-router-loader` to your typescript loaders chain\n\n### Webpack 1\n```\nloaders: [\n  {\n    test: /\\.ts$/,\n    loaders: [\n       'ng-router-loader',\n      'awesome-typescript-loader'\n    ]\n  }\n]\n```\n\n### Webpack 2\n```\nmodule: {\n  rules: [\n    {\n       test: /\\.ts$/,\n       use: [\n       {\n           loader: 'ng-router-loader' \n           options: {\n            /* ng-router-loader options */\n           }\n        } ,\n         'awesome-typescript-loader'          \n       ]\n    }\n  ]\n}\n```\n\n## Lazy Loading\nUse the `loadChildren` API with **any webpack resolvable** path to reference your lazy loaded angular module.\nUse `#` as a delimiter and write the `NgModule` class name.\n\n```ts\nimport { Routes } from '@angular/router';\n\nexport const ROUTES: Routes = [\n  { path: 'detail', loadChildren: () => '../my-ng-modules/details#DetailModule' },\n];\n```\n\n> The delimiter is configurable.\n\n> Query parameters (details#DetailModule?loader=sync) are added after the delimiter.  \n This behaviour might change, supporting both pre & after. \n\n## Synchronous Loading\nFor synchronous module loading, add the sync=true as a query string value to your loadChildren string. The module will be included in your bundle and not lazy-loaded.\n```ts\nimport { Routes } from '@angular/router';\n\nexport const ROUTES: Routes = [\n  { path: 'detail', loadChildren: () => '../my-ng-modules/details#DetailModule?loader=sync' },\n];\n```\n> The Synchronous example uses a resource specific loader option, you can also set a global loader option.\n\n## Configuration \nPlease read [the documentation](https://shlomiassaf.github.io/ng-router-loader)\n \n# In detph \n## @angular/router\nThe `@angular/router` provides an API for deferred `NgModule` loading, this is a simple API that accepts a function that returns an `NgModule` class.\n\n**Project structure**\n```\n├── project-root/\n│   ├── app\n│   │   ├── app.routes.ts\n│   ├── my-ng-modules\n│   │   ├── details\n│   │   │   ├──index.ts\n│   │   │   ├──details.module.ts\n│   │   │   ├──details.component.ts\n```\n\n> DetailModule is defined in `details.module.ts` and exported in `index.ts`\n\n**app.routes.ts**\n```ts\nimport { Routes } from '@angular/router';\nimport { DetailModule } from '../my-ng-modules/details';\n\nexport const ROUTES: Routes = [\n  { path: 'detail', loadChildren: () => DetailModule },\n];\n```\n\nThe `@angular/router` will not invoke the function until the path is active, this is the how lazy loading is done.\n \n## The loader\nThe example above works just fine but it includes a hard reference to the `DetailModule`. \nHaving a reference results in adding the file containing the module into the bundle.\n \nTo achieve lazy loading we need to write the code in a lazy loading code-style that webpack understand.\n\n`ng-router-loader` abstracts the complexity and provides an easy approach using a string reference.\nIn the background the loader will translate the string to code. \n\nThe string reference is the reference you use when you `require` or `import`.  \nAny string that resolves with `require` or `import` can be used and the same rules apply with 1 addition, the string reference requires must provide the name of the `NgModule` exported.\n\nUsing the same example above:\n\n**app.routes.ts**\n```ts\nimport { Routes } from '@angular/router';\n\nexport const ROUTES: Routes = [\n  { path: 'detail', loadChildren: () => '../my-ng-modules/details#DetailModule' },\n];\n```\n\n> It's that easy!\n\n## A word about the `angular-router-loader`\nThe `angular-router-loader` (\"ARL\" from now) came out with angular final when AOT was still blurry and not enough information was out there.\nThis made it very limited in it's capabilities, while using it I reached some dead ends that **ARL** did'nt handle.\n  \nAnother issue I had is that **ARL** forced me to structure my app in a certain way which was not webpack oriented. A loader should be transparent to the developer.\n\nI started fixing things and quickly understood that a rewrite is required.\n\nHere are some of the key points:\n\n  - **Module resolution**  \n  **ARL** use the file system to resolve URIs, this makes it impossible to use the goodies webpack `resolve` provides, \n  such as **barrels**, **aliasing**, **custom module directories** and more, see [webpack resolve](https://webpack.js.org/configuration/resolve/).  \n  `ng-router-loader` uses webpack to resolve modules so everything webpack resolves will work.\n  \n  - **AOT re-exports**   \n  **ARL** can't handle re-exported `NgModule` symbols in AOT mode.  \n   The example above shows the `index.ts` file exporting the `DetailModule` defined in a different \n   file, this is a tricky scenario that requires symbol tracking and it will result in an unknown module import created by **ARL**\n   `ng-router-loader` performs a deep metadata search to extract the right import.\n   \n   - **Custom code generators**\n   `ng-router-loader` code generation is plugin based, you can provide a custom code generator that fits your use case.\n   \n   - **Typescript based**\n   \n## TODO\n  [x] Smart detection, use AST to detect ROUTE API.\n\n## Credits\n\n[angular-router-loader](https://github.com/brandonroberts/angular-router-loader)\nLearned a lot reading the code!",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/shlomiassaf/ng-router-loader.git"
  },
  "scripts": {
    "build": "npm run clean:dist && ./node_modules/.bin/tsc",
    "build:integration": "npm run clean:ngc && npm run clean:webpack && ./node_modules/.bin/webpack --config webpack.integration.js --progress --profile",
    "ci": "npm run test",
    "clean:dist": "rm -rf dist",
    "clean:docs": "rm -rf docs/docs_dist",
    "clean:ngc": "rm -rf __codegen__",
    "clean:webpack": "rm -rf __webpack_dist__",
    "compile_integration": "npm run clean:ngc && ./node_modules/.bin/ngc -p tsconfig.integration.json",
    "docs": "npm run clean:docs && cd docs && ../node_modules/.bin/typedoc --options typedoc.json --excludePrivate",
    "test": "npm run compile_integration && npm run build && ./node_modules/.bin/mocha dist/test spec --recursive",
    "watch": "npm run build -- -w"
  },
  "typings": "index.d.ts",
  "version": "2.1.0"
}
